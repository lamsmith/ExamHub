// <auto-generated />
using System;
using ExamHub.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamHub.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240727235159_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ExamHub.Entity.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CreatedByPrincipalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "JSS 1",
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(4555),
                            CreatedBy = "1",
                            CreatedByPrincipalId = 0
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "JSS 2",
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(4563),
                            CreatedBy = "1",
                            CreatedByPrincipalId = 0
                        },
                        new
                        {
                            Id = 3,
                            ClassName = "JSS 3",
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(4568),
                            CreatedBy = "1",
                            CreatedByPrincipalId = 0
                        },
                        new
                        {
                            Id = 4,
                            ClassName = "SSS 1",
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(4572),
                            CreatedBy = "1",
                            CreatedByPrincipalId = 0
                        },
                        new
                        {
                            Id = 5,
                            ClassName = "SSS 2",
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(4578),
                            CreatedBy = "1",
                            CreatedByPrincipalId = 0
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.ClassStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassStudents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.ClassSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassSubjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.ClassTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassTeachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CreatedByTeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedByTeacherId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(4891),
                            CreatedBy = "1",
                            CreatedByTeacherId = 1,
                            DateTime = new DateTime(2024, 8, 29, 5, 50, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamName = "frist term",
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswer = "D",
                            ExamId = 1,
                            QuestionNo = 1,
                            QuestionText = "What is 2+2?"
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ExamHub.Entity.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExamQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("OptionLabel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ExamQuestionId");

                    b.ToTable("Options", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExamQuestionId = 1,
                            OptionLabel = "A",
                            OptionText = "3"
                        },
                        new
                        {
                            Id = 2,
                            ExamQuestionId = 1,
                            OptionLabel = "B",
                            OptionText = "4"
                        },
                        new
                        {
                            Id = 3,
                            ExamQuestionId = 1,
                            OptionLabel = "C",
                            OptionText = "5"
                        },
                        new
                        {
                            Id = 4,
                            ExamQuestionId = 1,
                            OptionLabel = "D",
                            OptionText = "6"
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.Principal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Principals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(4303),
                            CreatedBy = "1",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(1797),
                            CreatedBy = "admin",
                            Name = "Principal"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(1824),
                            CreatedBy = "admin",
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(1828),
                            CreatedBy = "admin",
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(3550),
                            CreatedBy = "1",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.StudentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StudentAnswers", (string)null);
                });

            modelBuilder.Entity("ExamHub.Entity.StudentExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Completed = false,
                            ExamId = 1,
                            Score = 0,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CreatedByPrincipalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByPrincipalId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(4759),
                            CreatedBy = "1",
                            CreatedByPrincipalId = 1,
                            SubjectName = "Math"
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.SubjectStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectStudents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StudentId = 1,
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.SubjectTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectTeachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubjectId = 1,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(4425),
                            CreatedBy = "1",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(2653),
                            CreatedBy = "1",
                            DateOfBirth = new DateTime(2000, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "ib",
                            Gender = 1,
                            LastName = "ibbb",
                            Password = "admin",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(2779),
                            CreatedBy = "1",
                            DateOfBirth = new DateTime(1999, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mko",
                            Gender = 1,
                            LastName = "axc",
                            Password = "teacher",
                            RoleId = 2,
                            Username = "teacher"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 28, 0, 51, 56, 661, DateTimeKind.Local).AddTicks(3386),
                            CreatedBy = "1",
                            DateOfBirth = new DateTime(2005, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "jnr",
                            Gender = 1,
                            LastName = "ib",
                            Password = "student",
                            RoleId = 3,
                            Username = "student"
                        });
                });

            modelBuilder.Entity("ExamHub.Entity.ClassStudent", b =>
                {
                    b.HasOne("ExamHub.Entity.Class", "Class")
                        .WithMany("ClassStudents")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamHub.Entity.Student", "Student")
                        .WithMany("ClassStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamHub.Entity.ClassSubject", b =>
                {
                    b.HasOne("ExamHub.Entity.Class", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamHub.Entity.Subject", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ExamHub.Entity.ClassTeacher", b =>
                {
                    b.HasOne("ExamHub.Entity.Class", "Class")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamHub.Entity.Teacher", "Teacher")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ExamHub.Entity.Exam", b =>
                {
                    b.HasOne("ExamHub.Entity.Class", "Class")
                        .WithMany("Exams")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamHub.Entity.Teacher", "CreatedByTeacher")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedByTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamHub.Entity.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("CreatedByTeacher");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ExamHub.Entity.ExamQuestion", b =>
                {
                    b.HasOne("ExamHub.Entity.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ExamHub.Entity.Notification", b =>
                {
                    b.HasOne("ExamHub.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamHub.Entity.Option", b =>
                {
                    b.HasOne("ExamHub.Entity.ExamQuestion", "ExamQuestion")
                        .WithMany("Options")
                        .HasForeignKey("ExamQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamQuestion");
                });

            modelBuilder.Entity("ExamHub.Entity.Principal", b =>
                {
                    b.HasOne("ExamHub.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamHub.Entity.Student", b =>
                {
                    b.HasOne("ExamHub.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamHub.Entity.StudentExam", b =>
                {
                    b.HasOne("ExamHub.Entity.Exam", "Exam")
                        .WithMany("StudentExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamHub.Entity.Student", "Student")
                        .WithMany("StudentExams")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamHub.Entity.Subject", b =>
                {
                    b.HasOne("ExamHub.Entity.Principal", null)
                        .WithMany()
                        .HasForeignKey("CreatedByPrincipalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamHub.Entity.SubjectStudent", b =>
                {
                    b.HasOne("ExamHub.Entity.Student", "Student")
                        .WithMany("SubjectStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamHub.Entity.Subject", "Subject")
                        .WithMany("SubjectStudents")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ExamHub.Entity.SubjectTeacher", b =>
                {
                    b.HasOne("ExamHub.Entity.Subject", "Subject")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamHub.Entity.Teacher", "Teacher")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ExamHub.Entity.Teacher", b =>
                {
                    b.HasOne("ExamHub.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamHub.Entity.User", b =>
                {
                    b.HasOne("ExamHub.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ExamHub.Entity.Class", b =>
                {
                    b.Navigation("ClassStudents");

                    b.Navigation("ClassSubjects");

                    b.Navigation("ClassTeachers");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("ExamHub.Entity.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("StudentExams");
                });

            modelBuilder.Entity("ExamHub.Entity.ExamQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("ExamHub.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExamHub.Entity.Student", b =>
                {
                    b.Navigation("ClassStudents");

                    b.Navigation("StudentExams");

                    b.Navigation("SubjectStudents");
                });

            modelBuilder.Entity("ExamHub.Entity.Subject", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("Exams");

                    b.Navigation("SubjectStudents");

                    b.Navigation("SubjectTeachers");
                });

            modelBuilder.Entity("ExamHub.Entity.Teacher", b =>
                {
                    b.Navigation("ClassTeachers");

                    b.Navigation("Exams");

                    b.Navigation("SubjectTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
