@model ExamHub.ViewModel.TakeExamViewModel

@{
    ViewData["Title"] = "Take Exam";
    Layout = null;
}

<head>
    <link rel="stylesheet" href="~/css/TakeExam.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
    <div class="container mt-5">
        <h1 class="mb-4 text-center">@Model.ExamName</h1>

        <div id="countdown" class="text-end mb-3 fw-bold text-danger"></div>

        <form id="examForm" asp-action="SubmitExam" method="post">
            <input type="hidden" asp-for="@Model.ExamId" />
            <input type="hidden" asp-for="@Model.ExamName" />

            @for (int i = 0; i < Model.Questions.Count; i++)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h4 class="card-title">@($"Question {i + 1}: {Model.Questions[i].QuestionText}")</h4>
                    </div>
                    <div class="card-body">
                        @for (int j = 0; j < Model.Questions[i].Options.Count; j++)
                        {
                            <div class="form-check">
                                <input type="hidden" asp-for="@Model.Questions[i].Options[j].OptionId" />
                                <input class="form-check-input" type="radio" asp-for="@Model.Questions[i].SelectedOptionId" value="@Model.Questions[i].Options[j].OptionId" id="question-@i-option-@j" name="question-@i" onclick="checkFormCompletion()" />
                                <label class="form-check-label" for="question-@i-option-@j">
                                    @Model.Questions[i].Options[j].OptionText
                                </label>
                            </div>
                        }
                    </div>
                </div>
            }

            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-success btn-lg" id="submitButton" disabled>Submit Exam</button>
            </div>
        </form>
    </div>

    <script>
        function checkFormCompletion() {
            const totalQuestions = @Model.Questions.Count;
            let answeredQuestions = 0;

            for (let i = 0; i < totalQuestions; i++) {
                const options = document.getElementsByName(`question-${i}`);
                for (let option of options) {
                    if (option.checked) {
                        answeredQuestions++;
                        break;
                    }
                }
            }

            const submitButton = document.getElementById("submitButton");
            if (answeredQuestions === totalQuestions) {
                submitButton.disabled = false;
            } else {
                submitButton.disabled = true;
            }
        }

        function startCountdown(endTime) {
            var countdownElement = document.getElementById("countdown");

            function updateCountdown() {
                var now = new Date().getTime();
                var distance = endTime - now;

                var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                countdownElement.innerHTML = `${hours}h ${minutes}m ${seconds}s`;

                if (distance < 0) {
                    clearInterval(interval);
                    countdownElement.innerHTML = "EXPIRED";
                    window.location.href = '@Url.Action("Exams", "Student")';
                }
            }

            var interval = setInterval(updateCountdown, 1000);
        }

        var endTime = new Date('@Model.EndTime.ToString("yyyy-MM-ddTHH:mm:ssZ")').getTime();
        startCountdown(endTime);
    </script>
</body>
